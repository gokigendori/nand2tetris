// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A命令かC命令か
    DMux(in=true,sel=instruction[15],a=aorder,b=corder);

    // Aへの書き込み
    And(a=corder,b=instruction[5],out=savea);
    Or(a=aorder,b=savea,out=aload);
    Mux16(a=instruction,b=aluout,sel=savea,out=ain);
    ARegister(in=ain,load=aload,out=aregister,out[0..14]=addressM);

    // comp判定
    And(a=corder,b=instruction[12],out=isM);
    Mux16(a=aregister,b=inM,sel=isM,out=aluy);

    // Dへの書き込み
    And(a=corder,b=instruction[4],out=dload);
    DRegister(in=aluout,load=dload,out=alux);

    // 演算
    ALU(x=alux,y=aluy,zx=instruction[11],nx=instruction[10],
    zy=instruction[9],ny=instruction[8],f=instruction[7],
    no=instruction[6],
    out=aluout,out=outM,zr=iszero,ng=isninus);

    // メモリに書き込むか
    And(a=corder,b=instruction[3],out=writeM);
    
    Not(in=isninus,out=plus);
    Not(in=iszero,out=nzero);
    And(a=plus,b=nzero,out=isplus);

    And(a=instruction[0],b=isplus,out=j1);
    And(a=instruction[1],b=iszero,out=j2);
    And(a=instruction[2],b=isninus,out=j3);
    Or(a=j1,b=j2,out=j4);
    Or(a=j4,b=j3,out=j5);
 
    And(a=instruction[2],b=instruction[1],out=out11);
    And(a=out11,b=instruction[0],out=andall);

    Or(a=andall,b=j5,out=isjump);
    And(a=corder,b=isjump,out=pcload);

    //PC jumpするか
    PC(in=aregister,inc=true,load=pcload,reset=reset,out[0..14]=pc);
}